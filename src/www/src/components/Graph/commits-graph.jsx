const React = require('react');
// Generated by CoffeeScript 1.9.0
let COLOURS, CommitsGraphMixin, SVGPathData, branchCount, classSet, distance, generateGraphData, getColour,
    __slice = [].slice;

generateGraphData = require('./generate-graph-data');

SVGPathData = require('./svg-path-data');

COLOURS = [
    '#e11d21', 
    '#fbca04', '#009800', 
    '#006b75', '#207de5', 
    '#0052cc', '#5319e7', 
    '#f7c6c7', '#fad8c7', 
    '#fef2c0', '#bfe5bf', 
    '#c7def8', '#bfdadc', 
    '#bfd4f2', '#d4c5f9', 
    '#cccccc', '#84b6eb', 
    '#e6e6e6', '#ffffff', 
    '#cc317c'];

classSet = function () {
    let classes;
    classes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return classes.filter(Boolean).join(' ');
};

getColour = function (branch) {
    let n;
    n = COLOURS.length;
    return COLOURS[branch % n];
};

branchCount = function (data) {
    let i, j, maxBranch;
    maxBranch = -1;
    i = 0;
    while (i < data.length) {
        j = 0;
        while (j < data[i][2].length) {
            if (maxBranch < data[i][2][j][0] || maxBranch < data[i][2][j][1]) {
                maxBranch = Math.max.apply(Math, [data[i][2][j][0], data[i][2][j][1]]);
            }
            j++;
        }
        i++;
    }
    return maxBranch + 1;
};

distance = function (point1, point2) {
    let xs, ys;
    xs = 0;
    ys = 0;
    xs = point2.x - point1.x;
    xs = xs * xs;
    ys = point2.y - point1.y;
    ys = ys * ys;
    return Math.sqrt(xs + ys);
};

class CommitsGraph extends React.Component {
  static defaultProps = {
      y_step: 40,
      x_step: 30,
      dotRadius: 4,
      lineWidth: 2,
      selected: null,
      mirror: false,
      unstyled: false
  }

  componentWillReceiveProps() {
      this.graphData = null;
      return this.branchCount = null;
  }

  cursorPoint = (e) => {
      let svg, svgPoint;
      // svg = this.getDOMNode();
      svgPoint = svg.createSVGPoint();
      svgPoint.x = e.clientX;
      svgPoint.y = e.clientY;
      return svgPoint.matrixTransform(svg.getScreenCTM().inverse());
  }

  handleClick = (sha) => {
      if (this.props.onClick == undefined) {
          return;
      }
      this.props.onClick(sha);
      // var closestCommit, commit, commitDistance, cursorLoc, smallestDistance, _base, _i, _len, _ref;
      // cursorLoc = this.cursorPoint(e);
      // smallestDistance = Infinity;
      // closestCommit = null;
      // _ref = this.renderedCommitsPositions;
      // for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      //   commit = _ref[_i];
      //   commitDistance = distance(cursorLoc, commit);
      //   if (commitDistance < smallestDistance) {
      //     smallestDistance = commitDistance;
      //     closestCommit = commit;
      //   }
      // }
      // return typeof (_base = this.props).onClick === "function" ? _base.onClick(closestCommit.sha) : void 0;
  }
  getGraphData() {
      return this.graphData || (this.graphData = generateGraphData(this.props.commits));
  }
  getBranchCount() {
      return this.branchCount || (this.branchCount = branchCount(this.getGraphData()));
  }
  getWidth() {
      if (this.props.width != null) {
          return this.props.width;
      }
      return this.getContentWidth();
  }
  getContentWidth() {
      return (this.getBranchCount() + 0.5) * this.props.x_step;
  }
  getHeight() {
      if (this.props.height != null) {
          return this.props.height;
      }
      return this.getContentHeight();
  }
  getContentHeight() {
      return (this.getGraphData().length + 2) * this.props.y_step;
  }
  getInvert() {
      if (this.props.mirror) {
          return 0 - this.props.width;
      } else {
          return 0;
      }
  }
  getOffset() {
      return this.getWidth() / 2 - this.getContentWidth() / 2;
  }
  renderRouteNode(svgPathDataAttribute, branch) {
      let classes, colour, style;
      if (!this.props.unstyled) {
          colour = getColour(branch);
          style = {
              stroke: colour,
              strokeWidth: this.props.lineWidth,
              fill: 'none'
          };
      }
      classes = 'commits-graph-branch-' + branch;
      return <path d={svgPathDataAttribute} style={style} className={classes}/>;
  }
  renderRoute(commit_idx, _arg) {
      let branch, from, from_x, from_y, invert, offset, svgPath, to, to_x, to_y, x_step, y_step, _ref;
      from = _arg[0], to = _arg[1], branch = _arg[2];
      _ref = this.props, x_step = _ref.x_step, y_step = _ref.y_step;
      offset = this.getOffset();
      invert = this.getInvert();
      svgPath = new SVGPathData;
      from_x = offset + invert + (from + 1) * x_step;
      from_y = (commit_idx + 0.5) * y_step;
      to_x = offset + invert + (to + 1) * x_step;
      to_y = (commit_idx + 0.5 + 1) * y_step;
      svgPath.moveTo(from_x, from_y);
      if (from_x === to_x) {
          svgPath.lineTo(to_x, to_y);
      } else {
          svgPath.bezierCurveTo(from_x - x_step / 4, from_y + y_step / 3 * 2, to_x + x_step / 4, to_y - y_step / 3 * 2, to_x, to_y);
      }
      return this.renderRouteNode(svgPath.toString(), branch);
  }
  renderCommitNode(x, y, sha, dot_branch) {
      let classes, colour, radius, selectedClass, strokeColour, strokeWidth, style;
      radius = this.props.dotRadius;
      if (!this.props.unstyled) {
          colour = getColour(dot_branch);
          if (sha === this.props.selected) {
              strokeColour = '#000';
              strokeWidth = 2;
          } else {
              strokeColour = colour;
              strokeWidth = 1;
          }
          style = {
              stroke: strokeColour,
              strokeWidth: strokeWidth,
              fill: colour
          };
      }
      if (this.props.selected) {
          selectedClass = 'selected';
      }
      classes = classSet('commits-graph-branch-' + dot_branch, selectedClass);
      return <circle 
          cx={x}
          cy={y}
          r={radius}
          style={style}
          // 这个点击范围有点小，不过现在先不用支持那么多交互
          onClick={() => this.handleClick(sha)}
          data-sha={sha}
          key={sha}
          className={classes}
      />;
  }
  renderCommit(idx, _arg) {
      let commitNode, dot, dot_branch, dot_offset, index, invert, offset, route, routeNodes, routes_data, sha, x, x_step, y, y_step, _ref;
      sha = _arg[0], dot = _arg[1], routes_data = _arg[2];
      dot_offset = dot[0], dot_branch = dot[1];
      _ref = this.props, x_step = _ref.x_step, y_step = _ref.y_step;
      offset = this.getOffset();
      invert = this.getInvert();
      x = offset + invert + (dot_offset + 1) * x_step;
      y = (idx + 0.5) * y_step;
      commitNode = this.renderCommitNode(x, y, sha, dot_branch);
      routeNodes = (function () {
          let _i, _len, _results;
          _results = [];
          for (index = _i = 0, _len = routes_data.length; _i < _len; index = ++_i) {
              route = routes_data[index];
              _results.push(this.renderRoute(idx, route));
          }
          return _results;
      }).call(this);
      this.renderedCommitsPositions.push({
          x: x,
          y: y,
          sha: sha
      });
      return [commitNode, routeNodes];
  }
  render() {
      let allCommitNodes, allRouteNodes, commit, commitNode, height, index, routeNodes, style, svgProps, width, _i, _len, _ref, _ref1;
      this.renderedCommitsPositions = [];
      allCommitNodes = [];
      allRouteNodes = [];
      _ref = this.getGraphData();
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          commit = _ref[index];
          _ref1 = this.renderCommit(index, commit), commitNode = _ref1[0], routeNodes = _ref1[1];
          allCommitNodes.push(commitNode);
          allRouteNodes = allRouteNodes.concat(routeNodes);
      }

      const children = [].concat(allRouteNodes, allCommitNodes);
      height = this.getHeight();
      width = this.getWidth();
      if (!this.props.unstyled) {
          style = {
              height: height,
              width: width,
              marginRight: 20
              // cursor: 'pointer'
          };
      }
      svgProps = {
          height: height,
          width: width,
          style: style,
          children: children
      };
      return (
          <svg
              // onClick={this.handleClick}
              height={height}
              width={width}
              style={style}
              children={children}
          ></svg>
      );
  }
};

module.exports = CommitsGraph;
